#
#   Stigma - Multiplayer online RPG - http://stigma.sourceforge.net
#   Copyright (C) 2005-2007 Minions Studio
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>. 
#

# LOGGER CONFIGURATION FILE

# >> POLSKI <<
# okreslenie jak logujemy (poziom logowania zaraz po "=") i gdzie, 
# file to 'zmienna' opisujaca w tym przypadku logger do pliku,
# stdout to 'zmienna' opisujaca w tym przypadku logger na konsole 
# nazwa moze byc niemal dowolna

# >> ENGLISH << 
# in this line we set how we log (the level of logging) and to which appenders
# file is an appender used to log to file
# stdout is an appeneder used to log to console 
log4j.rootLogger=DEBUG, stdout, file

# in this line stdout is set to log to console
log4j.appender.stdout=org.apache.log4j.ConsoleAppender

# setting the logging layout to configurable type
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout

# Layout configuration
# 
# >> POLSKI <<
# kazdy "pattern" zaczyna sie od % potem jest opcjonalna liczba 
# wskazujaca ile znakow ma miec dany pattern, w przypadku gdy napis
# jest krotszy uzupelniany jest spacjami, gdy liczby nie ma pattern
# posiada nielimitowana dlugosc
#
# >> ENGLISH <<
# Our layout is configured by specifying special patterns.
# Every pattern starts from char '%' after which is placed optional number used,
# to show how many characters pattern should have, in case if string is
# shorter than length set by number, white characters are appended to it,
# if length is not set length of pattern is set dynamically
#
# short description of patterns:
# c{number} - describes package from which class sending log message comes 
#       from, the 'number' variable sets depth of inclusion for example:
#       for a.b.c.MyClass pattern %c{2} will produce b.c 
# C{number} - class pattern, carries information which class sends log 
#       message, the 'number' variable behavior is the same as for %c 
#       pattern. Example: for a.b.c.MyClass pattern %C{2} will produce 
#       b.c.MyClass
# d         - %d pattern describes how date should look like, it is based
#       on standard java date format - SimpleDateFormat
# F         - name of file from which log event was send
# l         - JVM dependent information about log message sender
# L         - number of line where message occurred
# m         - log event message (the thing we want to log)
# M         - name of method where event occured
# n         - platform dependent new line char - with this line every pattern
#       should end
# p         - event priority (FATAL, ERROR etc)
# t         - name of thread where event occured
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy.MM.dd HH:mm:ss,SSS} %20t [%5p] %C.%M(%F:%L) - %m%n

# setting the file appender to file appender
log4j.appender.file=org.apache.log4j.RollingFileAppender

# name of file (special variable "program.name" may be used)
log4j.appender.file.File=${program.name}.log
# size of file
log4j.appender.file.MaxFileSize=500KB
# number of backup files
log4j.appender.file.MaxBackupIndex=10

# setting pattern layout for file appender 
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yyyy.MM.dd HH:mm:ss,SSS} %20t [%5p] %C.%M(%F:%L) - %m%n

# setting logging level for selected package
# allows to set different logging levels to different packages
# example: log4j.logger.com.foo=WARN
