/*
 * WelcomeWindow.java
 *
 * Created on December 20, 2006, 10:52 PM
 */

package shoddybattleclient;

import java.io.*;
import mechanics.moves.*;
import mechanics.statuses.items.HoldItem;
import netbattle.database.ServerListEntry;
import shoddybattle.ModData;
import shoddybattle.PokemonSpecies;
import javax.swing.*;
import java.awt.*;
import java.net.*;
import netbattle.database.Metaserver;
import java.util.*;

/**
 *
 * @author  Colin
 */
public class WelcomeWindow extends JFrame {
    
    private ServerListEntry[] m_servers = new ServerListEntry[0];
    
    private synchronized void refreshServerList() {
        Collections.sort(Arrays.asList(m_servers));
        
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                synchronized (WelcomeWindow.this) {
                    String name = null;
                    if (lstServers.getSelectedIndex() != -1) {
                        ServerListEntry entry = (ServerListEntry)lstServers.getSelectedValue();
                        name = entry.getName();
                    }
                    lstServers.setListData(m_servers);
                    lstServers.setSelectedIndex(0);
                    if (name == null) {
                        return;
                    }
                    for (int i = 0; i < m_servers.length; ++i) {
                        if (m_servers[i].getName().equals(name)) {
                            lstServers.setSelectedIndex(i);
                            break;
                        }
                    }
                }
            }
        });

    }
    
    private void requestServerList() {
        new Thread(new Runnable() {
            public void run() {
                ServerListEntry[] servers = Metaserver.getServerList(
                    new Runnable() {
                        public void run() {
                            refreshServerList();
                        }
                    }
                );
                if (servers != null) {
                    m_servers = servers;
                } else {
                    m_servers = new ServerListEntry[0];
                }
                refreshServerList();
            }
        }).start();
    }
    
    /** Creates new form WelcomeWindow */
    public WelcomeWindow() {
        initComponents();
        requestServerList();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstServers = new javax.swing.JList();
        cmdConnect = new javax.swing.JButton();
        cmdAdvanced = new javax.swing.JButton();
        cmdRefresh = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        cmdNewTeam = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Welcome to Shoddy Battle");
        setForeground(java.awt.Color.white);
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 48));
        jLabel1.setText("Shoddy Battle");

        jPanel1.setOpaque(false);
        jScrollPane1.setViewportView(lstServers);

        cmdConnect.setText("Connect");
        cmdConnect.setOpaque(false);
        cmdConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdConnectActionPerformed(evt);
            }
        });

        cmdAdvanced.setText("Advanced");
        cmdAdvanced.setOpaque(false);
        cmdAdvanced.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAdvancedActionPerformed(evt);
            }
        });

        cmdRefresh.setText("Refresh");
        cmdRefresh.setOpaque(false);
        cmdRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRefreshActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 305, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(cmdRefresh)
                    .add(cmdConnect, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(cmdAdvanced, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(135, 135, 135))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(cmdConnect)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cmdAdvanced)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 164, Short.MAX_VALUE)
                        .add(cmdRefresh)))
                .addContainerGap())
        );
        jTabbedPane1.addTab("Servers", jPanel1);

        jPanel2.setOpaque(false);
        cmdNewTeam.setText("New Team");
        cmdNewTeam.setOpaque(false);
        cmdNewTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewTeamActionPerformed(evt);
            }
        });

        jButton4.setText("Edit Team");
        jButton4.setOpaque(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jButton4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, cmdNewTeam, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(344, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(cmdNewTeam)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton4)
                .addContainerGap(201, Short.MAX_VALUE))
        );
        jTabbedPane1.addTab("Team Builder", jPanel2);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 460, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdAdvancedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAdvancedActionPerformed
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new AdvancedConnection(WelcomeWindow.this, true).setVisible(true);
            }
        });
    }//GEN-LAST:event_cmdAdvancedActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        TeamBuilder team = new TeamBuilder(false);
        if (!team.loadTeam()) {
            team.dispose();
        } else {
            team.setVisible(true);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void cmdRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRefreshActionPerformed
        requestServerList();
    }//GEN-LAST:event_cmdRefreshActionPerformed

    private void cmdNewTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewTeamActionPerformed
        ModSelector selector = new ModSelector(this, true);
        selector.setVisible(true);
        if (selector.hasSelection()) {
            String uuid = selector.getSelection();
            ModData mod = ModData.getModData(uuid);
            new TeamBuilder(mod).setVisible(true);
        }
    }//GEN-LAST:event_cmdNewTeamActionPerformed

    private void cmdConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdConnectActionPerformed
        ServerListEntry entry = m_servers[lstServers.getSelectedIndex()];
        try {
            System.out.println("Connecting to " + entry.getHost());
            final int version = Metaserver.getServerVersion(entry.getHost(), entry.getPort());
            System.out.println("Version: " + version);
            if (!entry.getHost().equals("official.shoddybattle.com")
                    && (version != netbattle.BattleServer.SERVER_VERSION)
                    && (version < 2)) {
                if (JOptionPane.showConfirmDialog(this,
                        "The server you have chosen is an outdated, old version.\n\n"
                        + "This means that teams you have created may not "
                        + "load on it,\nmoves, abilities, and items may be "
                        + "missing, and it may otherwise\ndiffer from the "
                        + "latest version. If you are the server operator, "
                        + "please\nupgrade your server.\n\nDo you "
                        + "want to connect to this outdated server?",
                        "Outdated Server",
                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)
                            != JOptionPane.YES_OPTION) {
                    return;
                }
            }
            final HumanClient link = new HumanClient(entry.getHost(), entry.getPort());
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new JoinServer(link, version).setVisible(true);
                }
            });
            dispose();
        } catch (IOException e) {
            new MessageBox(this, "Connection error",
                    "An error occurred while attempting to connect to the "
                    + "server: \n\n" + e.getMessage())
                    .setVisible(true);
        }
    }//GEN-LAST:event_cmdConnectActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {       
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            
        }
        
        if (ModData.getStorageLocation() == null) {
            FirstLaunch.initialiseLocalStorage();
        }
        
        try {
            File f = new File(ModData.getStorageLocation() + "errors");
            f.createNewFile();
            FileOutputStream out = new FileOutputStream(f);
            System.setErr(new PrintStream(out));
            System.setOut(new PrintStream(out));
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        if (args.length == 2) {
            try {
                SpriteLoader.setSpriteLoader(/*args[0]*/"dpsprites.PokemonSprite");
            } catch (SpriteLoaderException e) {
                new MessageBox(null, "Error",
                        "Failed to find the sprite loader. "
                        + "Please redownload the jnlp file.").setVisible(true);
            }
            try {
                MoveSet.getDefaultData().loadFromFile(new URL(args[1]));
            } catch (MalformedURLException e) {
                
            }
            try {
                PokemonSpecies.getDefaultData().loadSpeciesDatabase(
                        WelcomeWindow.class.getResourceAsStream("resources/dpspecies.db"), true);
            } catch (IOException e) {
                e.printStackTrace();
                new MessageBox(null, "Error", "Failed to load the species database.").setVisible(true);
                return;
            }
            try {
                PokemonSpecies.getDefaultData().cacheMoveSets(
                    MoveList.getDefaultData(), MoveSet.getDefaultData(), true);
            } catch (Exception e) {
                
            }
        } else {
            new MessageBox(null, "Error",
                    "Could not locate sprites and/or moves. ")
                    .setVisible(true);
        }
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WelcomeWindow().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdAdvanced;
    private javax.swing.JButton cmdConnect;
    private javax.swing.JButton cmdNewTeam;
    private javax.swing.JButton cmdRefresh;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList lstServers;
    // End of variables declaration//GEN-END:variables
    
}
