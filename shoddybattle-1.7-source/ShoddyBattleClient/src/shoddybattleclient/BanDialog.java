/*
 * BanDialog.java
 *
 * Created on April 21, 2007, 8:33 PM
 */

package shoddybattleclient;
import shoddybattle.util.TimeInterval;
import java.util.*;
import javax.swing.*;
import java.awt.Frame;
import java.awt.event.*;

/**
 *
 * @author  Colin
 */
public class BanDialog extends JDialog {
    
    private Calendar m_date = Calendar.getInstance();
    private boolean m_banned = false;
    private String m_user;
    
    /** Creates new form BanDialog */
    public BanDialog(Frame parent, boolean modal, String user) {
        super(parent, modal);
        initComponents();
        m_user = user;
        lblUserName.setText("Banning " + user + ".");
        cboMonth.setModel(new DefaultComboBoxModel(getMonthStrings()));
        cboMonth.setSelectedIndex(m_date.get(Calendar.MONTH));
        String[] years = new String[10];
        int year = m_date.get(Calendar.YEAR);
        for (int i = 0; i < years.length; ++i) {
            years[i] = String.valueOf(year++);
        }
        cboYear.setModel(new DefaultComboBoxModel(years));
        cboDay.setSelectedItem(null);
        hour.setModel(new SpinnerNumberModel(m_date.get(Calendar.HOUR_OF_DAY), 0, 23, 1));
        minute.setModel(new SpinnerNumberModel(m_date.get(Calendar.MINUTE), 1, 60, 1));
        second.setModel(new SpinnerNumberModel(m_date.get(Calendar.SECOND), 1, 60, 1));
        displayDays();
    }
    
    private void displayDays() {
        int current = cboDay.getSelectedIndex();
        if (current == -1) {
            current = m_date.get(Calendar.DAY_OF_MONTH) - 1;
        }
        int max = m_date.getActualMaximum(Calendar.DAY_OF_MONTH);
        String[] days = new String[max];
        for (int i = 0; i < days.length; ++i) {
            days[i] = String.valueOf(i + 1);
        }
        cboDay.setModel(new DefaultComboBoxModel(days));
        cboDay.setSelectedIndex(current);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        lblUserName = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cboDay = new javax.swing.JComboBox();
        cboMonth = new javax.swing.JComboBox();
        cboYear = new javax.swing.JComboBox();
        cmdBan = new javax.swing.JButton();
        hour = new javax.swing.JSpinner();
        minute = new javax.swing.JSpinner();
        second = new javax.swing.JSpinner();
        cmdCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ban User");

        jLabel1.setText("Choose when the ban expires.");

        cboDay.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboDay.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboDayItemStateChanged(evt);
            }
        });

        cboMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboMonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboMonthItemStateChanged(evt);
            }
        });

        cboYear.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboYearItemStateChanged(evt);
            }
        });

        cmdBan.setText("Ban");
        cmdBan.setSelected(true);
        cmdBan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBanActionPerformed(evt);
            }
        });

        hour.setToolTipText("Hours");

        minute.setToolTipText("Minutes");

        second.setToolTipText("Seconds");

        cmdCancel.setText("Cancel");
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblUserName)
                    .add(jLabel1)
                    .add(layout.createSequentialGroup()
                        .add(cboDay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 78, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cboMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cboYear, 0, 97, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(cmdBan, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cmdCancel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(hour, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(minute, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(second, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(lblUserName)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel1)
                .add(14, 14, 14)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cboYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cboMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cboDay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(minute, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(second, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(hour, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 35, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cmdBan)
                    .add(cmdCancel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        dispose();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cboDayItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboDayItemStateChanged
        if (!isVisible()) return;
        m_date.set(Calendar.DAY_OF_MONTH, cboDay.getSelectedIndex() + 1);
    }//GEN-LAST:event_cboDayItemStateChanged

    private void cboMonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboMonthItemStateChanged
        if (!isVisible()) return;
        int current = cboDay.getSelectedIndex();
        m_date.set(Calendar.DATE, 1);
        m_date.set(Calendar.MONTH, cboMonth.getSelectedIndex());
        int max = m_date.getActualMaximum(Calendar.DATE);
        if (current < max) {
            m_date.set(Calendar.DATE, current + 1);
        } else {
            cboDay.setSelectedIndex(max - 1);
        }
        displayDays();
    }//GEN-LAST:event_cboMonthItemStateChanged

    private void cboYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboYearItemStateChanged
        if (!isVisible()) return;
        int current = cboDay.getSelectedIndex();
        m_date.set(Calendar.DATE, 1);
        m_date.set(Calendar.YEAR, Integer.valueOf((String)cboYear.getSelectedItem()).intValue());
        int max = m_date.getActualMaximum(Calendar.DATE);
        if (current < max) {
            m_date.set(Calendar.DATE, current + 1);
        } else {
            cboDay.setSelectedIndex(max - 1);
        }
        displayDays();
    }//GEN-LAST:event_cboYearItemStateChanged

    private void cmdBanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBanActionPerformed
        m_date.set(Calendar.HOUR_OF_DAY, ((Integer)hour.getValue()).intValue());
        m_date.set(Calendar.MINUTE, ((Integer)minute.getValue()).intValue());
        m_date.set(Calendar.SECOND, ((Integer)second.getValue()).intValue());
        if (m_date.before(Calendar.getInstance())) {
            JOptionPane.showMessageDialog(this, "The ban should expire some time in the future.");
            return;
        }
        String interval = TimeInterval.getDeltaInterval(m_date.getTime()).getApproximation();
        if (JOptionPane.showConfirmDialog(this,
                "Are you sure that you want to ban " + m_user + " for " + interval + "?",
                "Confirmation", JOptionPane.YES_NO_OPTION) ==
                JOptionPane.NO_OPTION) {
            return;
        }
        m_banned = true;
        dispose();
    }//GEN-LAST:event_cmdBanActionPerformed
    
    public static long getBanDate(Frame parent, String user) {
        BanDialog dialog = new BanDialog(parent, true, user);
        dialog.setVisible(true);
        if (dialog.m_banned) {
            return dialog.m_date.getTimeInMillis();
        }
        return -1;
    }
    
    /**
     * DateFormatSymbols returns an extra, empty value at the
     * end of the array of months.  Remove it.
     * @author The Java Tutorial
     */
    static protected String[] getMonthStrings() {
        String[] months = new java.text.DateFormatSymbols().getMonths();
        int lastIndex = months.length - 1;

        if (months[lastIndex] == null
           || months[lastIndex].length() <= 0) { //last item empty
            String[] monthStrings = new String[lastIndex];
            System.arraycopy(months, 0,
                             monthStrings, 0, lastIndex);
            return monthStrings;
        } else { //last item not empty
            return months;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Date date = new Date(getBanDate(new javax.swing.JFrame(), "Ben"));
                System.out.println(date.getTime());
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboDay;
    private javax.swing.JComboBox cboMonth;
    private javax.swing.JComboBox cboYear;
    private javax.swing.JButton cmdBan;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JSpinner hour;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JSpinner minute;
    private javax.swing.JSpinner second;
    // End of variables declaration//GEN-END:variables
    
}
