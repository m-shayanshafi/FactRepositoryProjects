apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'idea'
apply plugin: 'project-report'

sourceCompatibility = 1.6
group = 'com.github.tomakehurst'
version = 1.58

def versions = [
        jackson: '2.6.0',
]

repositories {
	mavenCentral()
}

configurations {
	provided
}

dependencies {
	compile "org.mortbay.jetty:jetty:6.1.26"
	compile "com.google.guava:guava:18.0"
	compile "com.fasterxml.jackson.core:jackson-core:$versions.jackson",
        	"com.fasterxml.jackson.core:jackson-annotations:$versions.jackson",
        	"com.fasterxml.jackson.core:jackson-databind:$versions.jackson"
	compile "org.apache.httpcomponents:httpclient:4.5"
    compile "org.skyscreamer:jsonassert:1.2.3"
    compile "xmlunit:xmlunit:1.6"
    compile "com.jayway.jsonpath:json-path:0.8.1"
	compile "org.slf4j:slf4j-api:1.7.12"
	compile "net.sf.jopt-simple:jopt-simple:4.9"
	compile ("junit:junit:4.11") {
        exclude group: "org.hamcrest", module: "hamcrest-core"
    }
	
    testCompile "org.hamcrest:hamcrest-all:1.3"
	testCompile ("org.jmock:jmock:2.5.1") {
        exclude group: "junit", module: "junit-dep"
        exclude group: "org.hamcrest", module: "hamcrest-core"
        exclude group: "org.hamcrest", module: "hamcrest-library"
    }
	testCompile ("org.jmock:jmock-junit4:2.5.1") {
		exclude group: "junit", module: "junit-dep"
        exclude group: "org.hamcrest", module: "hamcrest-core"
        exclude group: "org.hamcrest", module: "hamcrest-library"
	}
	testCompile "net.sf.json-lib:json-lib:2.4:jdk15"
	testCompile "com.googlecode.jarjar:jarjar:1.3"
    testCompile "commons-io:commons-io:2.4"

    testRuntime 'org.slf4j:slf4j-log4j12:1.7.12'
    testRuntime files('src/test/resources/classpathfiles.zip')
}

test {
    // Set the timezone for testing somewhere other than my machine to increase the chances of catching timezone bugs
    systemProperty 'user.timezone', 'Australia/Sydney'

    maxParallelForks = 1
}

buildscript {
    repositories {
        maven {
            url "https://oss.sonatype.org"
        }
        mavenCentral()
    }

    dependencies {
        classpath group:'org.ajoberstar', name:'gradle-plugins', version:'0.1.1'

    }
}

sourceSets {
	main { compileClasspath += configurations.provided }
}

eclipse {
	classpath {
		plusConfigurations += configurations.provided
	}
}

jar {
    manifest {
        attributes("Main-Class": "com.github.tomakehurst.wiremock.standalone.WireMockServerRunner")
    }
}

task jarAll(type: Jar, dependsOn: jar) {
    inputs.files jar.archivePath
    appendix = 'standalone'
    def metaInfDir = "$buildDir/tmp/manifest"
    def jar = project.tasks.jar
    String fileName = jar.archiveName - ("." + jar.extension) + "-standalone." + jar.extension
	File jarFile = new File(jar.destinationDir, fileName)
    doFirst {
    	manifest.writeTo("${metaInfDir}/MANIFEST.MF")
        project.ant {
            taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.testCompile.asPath
            jarjar(jarfile: jarFile, manifest: "${metaInfDir}/MANIFEST.MF") {
                zipfileset(src: jar.archivePath)
                
                configurations.compile.files.findAll { !it.name.contains("junit") }.each {
                	zipfileset(src: it)
                }
                rule pattern: "org.mortbay.**", result: "wiremock.org.mortbay.@1"
                rule pattern: "com.google.common.**", result: "wiremock.com.google.common.@1"
                rule pattern: "com.fasterxml.jackson.**", result: "wiremock.com.fasterxml.jackson.@1"
                rule pattern: "org.apache.http.**", result: "wiremock.org.apache.http.@1"
                rule pattern: "org.apache.commons.**", result: "wiremock.org.apache.commons.@1"
                rule pattern: "joptsimple.**", result: "wiremock.joptsimple.@1"
                rule pattern: "org.skyscreamer.**", result: "wiremock.org.skyscreamer.@1"
                rule pattern: "org.json.**", result: "wiremock.org.json.@1"
                rule pattern: "net.minidev.**", result: "wiremock.net.minidev.@1"
                rule pattern: "com.jayway.**", result: "wiremock.com.jayway.@1"
            }
        }
        
        Date date = new Date()
		String name = jar.baseName
        project.artifacts.add('archives',
			[
				getClassifier: { -> "standalone" },
				getDate: {-> date },
				getExtension: {-> "jar" },
				getType: {-> "jar" },
				getFile: {-> jarFile },
				getName: {-> name }
			] as PublishArtifact
		)
    }
    manifest {
        attributes("Main-Class": "com.github.tomakehurst.wiremock.standalone.WireMockServerRunner")
    }
}

def releaseDirUrl
def user
def password

task sourcesJar(type: Jar, dependsOn:classes) {
     classifier = 'sources'
     from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
     classifier = 'javadoc'
     from javadoc.destinationDir
}

artifacts {
     archives sourcesJar
     archives javadocJar
}

signing {
    required { !version.toString().contains("SNAPSHOT") && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

if (!this.hasProperty('sonatypeUser'))
    user = 'default'
else
    user = sonatypeUser

if (!this.hasProperty('sonatypePassword'))
    password = 'default'
else
    password = sonatypePassword

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
            	authentication(userName: user , password: password)
        	};
        	beforeDeployment { deployment -> signing.signPom(deployment) };
            pom.artifactId = 'wiremock'
            pom.project {
            	packaging 'jar'
            	name 'WireMock'
            	description 'A web service test double for all occasions'
            	
            	url 'https://github.com/tomakehurst/wiremock'
            	
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                
                scm {
					connection 'https://tomakehurst@github.com/tomakehurst/wiremock.git'
					developerConnection 'https://tomakehurst@github.com/tomakehurst/wiremock.git'
					url 'https://tomakehurst@github.com/tomakehurst/wiremock.git'
				}
				
				developers {
					developer {
						id 'tomakehurst'
						name 'Tom Akehurst'
					}
				}
            }
            
            pom.whenConfigured { thepom ->
            	println thepom.dependencies.findAll({ it.artifactId.equals('junit') || it.scope.equals('test') });
            	thepom.dependencies.removeAll(thepom.dependencies.findAll({ it.artifactId.equals('junit') || it.scope.equals('test') }));
			}
        }
    }
}

task addGitTag << {
    println "git tag ${version}".execute().text
    println "git push origin --tags".execute().text
}

task release {
	dependsOn clean, jarAll, uploadArchives, addGitTag
}

task 'set-release-dir' << {
	if (releaseDir) {
		releaseDirUrl = 'file://' + releaseDir
		if (!releaseDirUrl.endsWith('/')) {
			releaseDirUrl = releaseDirUrl + '/';
		}
		
		tasks.uploadArchives.repositories.mavenDeployer.repository.url = releaseDirUrl
		
		println 'Release dir set to: ' + releaseDirUrl
	} else {
		logger.error "Please specify release dir e.g. -P/home/me/.m2/repository"
        System.exit(1)
	}
}

task 'release-to' {
	dependsOn 'set-release-dir', clean, jarAll, uploadArchives, addGitTag
}

task 'bump-version' << {
    def filesWithVersion = [
        'build.gradle': { "version = 1.${it}" },
        'docs/source/conf.py': { "version = '1.${it}'" },
        'docs/source/getting-started.rst': [{ "<version>1.${it}</version>" },{ "wiremock/1.${it}/wiremock-1.${it}-standalone.jar" }],
        'docs/source/running-standalone.rst': { "wiremock/1.${it}/wiremock-1.${it}-standalone.jar" },
        'sample-war/build.gradle': { "com.github.tomakehurst:wiremock:1.${it}" },
    ]

    def gradleBuildFile = new File('build.gradle')
    int currentMinorVersion
    gradleBuildFile.text.find ~/version = 1.([0-9]+)/, { match, minorVersion ->
        currentMinorVersion = Integer.valueOf(minorVersion)
        int nextMinorVersion = currentMinorVersion + 1

        filesWithVersion.each { fileName, lineWithVersionTemplates ->
            def file = new File(fileName)
            def lineWithVersionTemplateList = lineWithVersionTemplates instanceof List ?
                lineWithVersionTemplates :
                [lineWithVersionTemplates];

            lineWithVersionTemplateList.each { lineWithVersionTemplate ->
                def oldLine = lineWithVersionTemplate.call(currentMinorVersion)
                def newLine = lineWithVersionTemplate.call(nextMinorVersion)
                println "Replacing '${oldLine}' with '${newLine}' in ${fileName}"
                file.text = file.text.replace(oldLine, newLine);
            }
        }
    }
}

task 'bump-version-down' << {
    def filesWithVersion = [
        'build.gradle': { "version = 1.${it}" },
        'docs/source/conf.py': { "version = '1.${it}'" },
        'docs/source/getting-started.rst': [{ "<version>1.${it}</version>" },{ "wiremock/1.${it}/wiremock-1.${it}-standalone.jar" }],
        'docs/source/running-standalone.rst': { "wiremock/1.${it}/wiremock-1.${it}-standalone.jar" },
        'sample-war/build.gradle': { "com.github.tomakehurst:wiremock:1.${it}" },
    ]

    def gradleBuildFile = new File('build.gradle')
    int currentMinorVersion
    gradleBuildFile.text.find ~/version = 1.([0-9]+)/, { match, minorVersion ->
        currentMinorVersion = Integer.valueOf(minorVersion)
        int nextMinorVersion = currentMinorVersion - 1

        filesWithVersion.each { fileName, lineWithVersionTemplates ->
            def file = new File(fileName)
            def lineWithVersionTemplateList = lineWithVersionTemplates instanceof List ?
                lineWithVersionTemplates :
                [lineWithVersionTemplates];

            lineWithVersionTemplateList.each { lineWithVersionTemplate ->
                def oldLine = lineWithVersionTemplate.call(currentMinorVersion)
                def newLine = lineWithVersionTemplate.call(nextMinorVersion)
                println "Replacing '${oldLine}' with '${newLine}' in ${fileName}"
                file.text = file.text.replace(oldLine, newLine);
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

task 'add-copyright-headers' << {
	def copyrightNotice = """/*
 * Copyright (C) 2011 Thomas Akehurst
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"""

	def srcDir = new File('src')
	srcDir.eachFileRecurse { file ->
		if (file.name.endsWith(".java") && !file.text.contains(copyrightNotice)) {
			println "Adding copyright header to $file.path"
			def newFileText = copyrightNotice + file.text;
 			file.text = newFileText;
		}
	}
}
